
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000059c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c1f  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000860  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000994  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000217  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cf7  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000458a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004fa  000004fa  0000058e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000462c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Lcd_SendCommand 000000a6  0000027e  0000027e  00000312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Lcd_Init 00000068  000003ca  000003ca  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Lcd_SendData 000000a6  00000324  00000324  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Lcd_ClrScreenFnc 00000008  000004f2  000004f2  00000586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Lcd_SendString 00000036  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000019  0000006c  0000006c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    00000046  00000432  00000432  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.GPIO_SetDirectionForPin 000000fc  00000086  00000086  0000011a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.GPIO_SetOutputForPin 000000fc  00000182  00000182  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.GPIO_SetOutputForGroup 0000002e  000004ae  000004ae  00000542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  00000502  00000502  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  00000504  00000504  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  00000506  00000506  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  000004dc  000004dc  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  000004fe  000004fe  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
   8:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
   c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  10:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  14:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  18:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  1c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  20:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  24:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  28:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  2c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  30:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  34:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  38:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  3c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  40:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  44:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  48:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  4c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>
  50:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 19 02 	call	0x432	; 0x432 <main>
  64:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000004fa <__bad_interrupt>:
 4fa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Lcd_SendCommand:

0000027e <Lcd_SendCommand>:

}


void Lcd_SendCommand(u8 Command)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_RS,Lcd_Low);//Command
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f ec       	ldi	r24, 0xCF	; 207
 28e:	97 e0       	ldi	r25, 0x07	; 7
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <Lcd_SendCommand+0x12>
 294:	00 c0       	rjmp	.+0      	; 0x296 <Lcd_SendCommand+0x18>
 296:	00 00       	nop
	_delay_ms(1);
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_HighForPin);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 2a2:	8f ec       	ldi	r24, 0xCF	; 207
 2a4:	97 e0       	ldi	r25, 0x07	; 7
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <Lcd_SendCommand+0x28>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <Lcd_SendCommand+0x2e>
 2ac:	00 00       	nop
	GPIO_SetOutputForGroup(Lcd_DataGroup,Command);
	_delay_ms(1);
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
	_delay_ms(1);
#elif LCD_BITS_MODE  == LCD_DATA_BITS_4
	GPIO_SetOutputForGroup(Lcd_DataGroup,Command & 0xF0);
 2ae:	6c 2f       	mov	r22, r28
 2b0:	60 7f       	andi	r22, 0xF0	; 240
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 57 02 	call	0x4ae	; 0x4ae <GPIO_SetOutputForGroup>
 2b8:	8f ec       	ldi	r24, 0xCF	; 207
 2ba:	97 e0       	ldi	r25, 0x07	; 7
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <Lcd_SendCommand+0x3e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <Lcd_SendCommand+0x44>
 2c2:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tdsw = 100ns */
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 2ce:	8f ec       	ldi	r24, 0xCF	; 207
 2d0:	97 e0       	ldi	r25, 0x07	; 7
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <Lcd_SendCommand+0x54>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <Lcd_SendCommand+0x5a>
 2d8:	00 00       	nop
	_delay_ms(1);
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_HighForPin);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 2e4:	8f ec       	ldi	r24, 0xCF	; 207
 2e6:	97 e0       	ldi	r25, 0x07	; 7
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <Lcd_SendCommand+0x6a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <Lcd_SendCommand+0x70>
 2ee:	00 00       	nop
	_delay_ms(1);

	GPIO_SetOutputForGroup(Lcd_DataGroup,(Command&0x0F)<<4);
 2f0:	90 e1       	ldi	r25, 0x10	; 16
 2f2:	c9 9f       	mul	r28, r25
 2f4:	b0 01       	movw	r22, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <GPIO_SetOutputForGroup>
 2fe:	8f ec       	ldi	r24, 0xCF	; 207
 300:	97 e0       	ldi	r25, 0x07	; 7
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <Lcd_SendCommand+0x84>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Lcd_SendCommand+0x8a>
 308:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tdsw = 100ns */
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 314:	8f ec       	ldi	r24, 0xCF	; 207
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Lcd_SendCommand+0x9a>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Lcd_SendCommand+0xa0>
 31e:	00 00       	nop
	_delay_ms(1);

#endif

}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

Disassembly of section .text.Lcd_Init:

000003ca <Lcd_Init>:

#include"../Header/Lcd_Interface.h"

void Lcd_Init(void)
{
	GPIO_SetDirectionForPin(Lcd_ControlGroup,Lcd_RS,Lcd_HighForPin);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
	GPIO_SetDirectionForPin(Lcd_ControlGroup,Lcd_E,Lcd_HighForPin);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
 3de:	8f e3       	ldi	r24, 0x3F	; 63
 3e0:	9c e9       	ldi	r25, 0x9C	; 156
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <Lcd_Init+0x18>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <Lcd_Init+0x1e>
 3e8:	00 00       	nop

	GPIO_SetDirectionForGroup(Lcd_DataGroup,Lcd_HighForGroup);

#elif LCD_BITS_MODE  == LCD_DATA_BITS_4

	GPIO_SetDirectionForPin(Lcd_DataGroup,GPIO_PIN4,GPIO_Output);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
	GPIO_SetDirectionForPin(Lcd_DataGroup,GPIO_PIN5,GPIO_Output);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
	GPIO_SetDirectionForPin(Lcd_DataGroup,GPIO_PIN6,GPIO_Output);
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	66 e0       	ldi	r22, 0x06	; 6
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
	GPIO_SetDirectionForPin(Lcd_DataGroup,GPIO_PIN7,GPIO_Output);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	67 e0       	ldi	r22, 0x07	; 7
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_SetDirectionForPin>
#elif LCD_BITS_MODE  == LCD_DATA_BITS_4//4 bit mode

	/*Wait for more than 30 ms*/
//	_delay_ms(30);

	Lcd_SendCommand(LCD_2LINES_4BitsMode_INIT1);
 412:	83 e3       	ldi	r24, 0x33	; 51
 414:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>
	Lcd_SendCommand(LCD_2LINES_4BitsMode_INIT2);
 418:	82 e3       	ldi	r24, 0x32	; 50
 41a:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>

	Lcd_SendCommand(Lcd_58_2Lines4BitsMode);
 41e:	88 e2       	ldi	r24, 0x28	; 40
 420:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>

#endif
	Lcd_SendCommand(Lcd_DisplayONCursorOFF8Bit);	/* cursor off */
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>
	Lcd_SendCommand(Lcd_ClrScreenCommand);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>
 430:	08 95       	ret

Disassembly of section .text.Lcd_SendData:

00000324 <Lcd_SendData>:

}


void Lcd_SendData(u8 Data)
{
 324:	cf 93       	push	r28
 326:	c8 2f       	mov	r28, r24
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_RS,Lcd_HighForPin);//DATA
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 332:	8f ec       	ldi	r24, 0xCF	; 207
 334:	97 e0       	ldi	r25, 0x07	; 7
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <Lcd_SendData+0x12>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <Lcd_SendData+0x18>
 33c:	00 00       	nop
	_delay_ms(1);
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_HighForPin);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 348:	8f ec       	ldi	r24, 0xCF	; 207
 34a:	97 e0       	ldi	r25, 0x07	; 7
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <Lcd_SendData+0x28>
 350:	00 c0       	rjmp	.+0      	; 0x352 <Lcd_SendData+0x2e>
 352:	00 00       	nop
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
	_delay_ms(1);

#elif LCD_BITS_MODE  == LCD_DATA_BITS_4

	GPIO_SetOutputForGroup(Lcd_DataGroup,Data & 0xF0);
 354:	6c 2f       	mov	r22, r28
 356:	60 7f       	andi	r22, 0xF0	; 240
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 57 02 	call	0x4ae	; 0x4ae <GPIO_SetOutputForGroup>
 35e:	8f ec       	ldi	r24, 0xCF	; 207
 360:	97 e0       	ldi	r25, 0x07	; 7
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <Lcd_SendData+0x3e>
 366:	00 c0       	rjmp	.+0      	; 0x368 <Lcd_SendData+0x44>
 368:	00 00       	nop

	_delay_ms(1);	/* delay for processing Tdsw = 100ns */
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 374:	8f ec       	ldi	r24, 0xCF	; 207
 376:	97 e0       	ldi	r25, 0x07	; 7
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Lcd_SendData+0x54>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <Lcd_SendData+0x5a>
 37e:	00 00       	nop
	_delay_ms(1);
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_HighForPin);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 38a:	8f ec       	ldi	r24, 0xCF	; 207
 38c:	97 e0       	ldi	r25, 0x07	; 7
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <Lcd_SendData+0x6a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <Lcd_SendData+0x70>
 394:	00 00       	nop
	_delay_ms(1);

	GPIO_SetOutputForGroup(Lcd_DataGroup,(Data&0x0F)<<4);
 396:	90 e1       	ldi	r25, 0x10	; 16
 398:	c9 9f       	mul	r28, r25
 39a:	b0 01       	movw	r22, r0
 39c:	11 24       	eor	r1, r1
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <GPIO_SetOutputForGroup>
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	97 e0       	ldi	r25, 0x07	; 7
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Lcd_SendData+0x84>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Lcd_SendData+0x8a>
 3ae:	00 00       	nop

	_delay_ms(1);	/* delay for processing Tdsw = 100ns */
	GPIO_SetOutputForPin(Lcd_ControlGroup,Lcd_E,Lcd_Low);
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 c1 00 	call	0x182	; 0x182 <GPIO_SetOutputForPin>
 3ba:	8f ec       	ldi	r24, 0xCF	; 207
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <Lcd_SendData+0x9a>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <Lcd_SendData+0xa0>
 3c4:	00 00       	nop
	_delay_ms(1);

#endif

}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

Disassembly of section .text.Lcd_ClrScreenFnc:

000004f2 <Lcd_ClrScreenFnc>:
//}

void Lcd_ClrScreenFnc(void)
{
	/*Clear display*/
	Lcd_SendCommand(Lcd_ClrScreenCommand);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 3f 01 	call	0x27e	; 0x27e <Lcd_SendCommand>
 4f8:	08 95       	ret

Disassembly of section .text.Lcd_SendString:

00000478 <Lcd_SendString>:
}

void Lcd_SendString(const u8* Text)
{
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	cf 93       	push	r28
 480:	6b 01       	movw	r12, r22
 482:	e8 2e       	mov	r14, r24
	u8 Cou=0;
 484:	c0 e0       	ldi	r28, 0x00	; 0
	while(Text[Cou]!='\0')
 486:	03 c0       	rjmp	.+6      	; 0x48e <Lcd_SendString+0x16>
	{
		Lcd_SendData(Text[Cou]);
 488:	0e 94 92 01 	call	0x324	; 0x324 <Lcd_SendData>
		Cou++;
 48c:	cf 5f       	subi	r28, 0xFF	; 255
}

void Lcd_SendString(const u8* Text)
{
	u8 Cou=0;
	while(Text[Cou]!='\0')
 48e:	ae 2d       	mov	r26, r14
 490:	c6 01       	movw	r24, r12
 492:	8c 0f       	add	r24, r28
 494:	91 1d       	adc	r25, r1
 496:	a1 1d       	adc	r26, r1
 498:	fc 01       	movw	r30, r24
 49a:	84 91       	lpm	r24, Z
 49c:	a7 fd       	sbrc	r26, 7
 49e:	80 81       	ld	r24, Z
 4a0:	81 11       	cpse	r24, r1
 4a2:	f2 cf       	rjmp	.-28     	; 0x488 <Lcd_SendString+0x10>
	{
		Lcd_SendData(Text[Cou]);
		Cou++;
	}
}
 4a4:	cf 91       	pop	r28
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	08 95       	ret

Disassembly of section .text.main:

00000432 <main>:
	PORTA = numbers[digit];  // Output the corresponding encoding to PORTB
}
*/
void main(void) {
		
	Lcd_Init();
 432:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Lcd_Init>
		
	while(1)
	{
		
		Lcd_SendString("Alfred Nagy");
 436:	6c e6       	ldi	r22, 0x6C	; 108
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 3c 02 	call	0x478	; 0x478 <Lcd_SendString>
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	8d e3       	ldi	r24, 0x3D	; 61
 444:	99 e4       	ldi	r25, 0x49	; 73
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <main+0x14>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <main+0x1e>
 450:	00 00       	nop
		_delay_ms(3000);
		Lcd_ClrScreenFnc();
 452:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd_ClrScreenFnc>
		Lcd_SendString("Hello world!");
 456:	68 e7       	ldi	r22, 0x78	; 120
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 3c 02 	call	0x478	; 0x478 <Lcd_SendString>
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	8d e3       	ldi	r24, 0x3D	; 61
 464:	99 e4       	ldi	r25, 0x49	; 73
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <main+0x34>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x3e>
 470:	00 00       	nop
		_delay_ms(3000);
		Lcd_ClrScreenFnc();
 472:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd_ClrScreenFnc>
 476:	df cf       	rjmp	.-66     	; 0x436 <main+0x4>

Disassembly of section .text.GPIO_SetDirectionForPin:

00000086 <GPIO_SetDirectionForPin>:
			break;
		case GPIO_GroupC_ID:
			GPIO_DDRC_REG.BYTE=Direction;
			break;
		case GPIO_GroupD_ID:
			GPIO_DDRD_REG.BYTE=Direction;
  86:	9f ef       	ldi	r25, 0xFF	; 255
  88:	98 0f       	add	r25, r24
  8a:	94 30       	cpi	r25, 0x04	; 4
  8c:	08 f0       	brcs	.+2      	; 0x90 <GPIO_SetDirectionForPin+0xa>
  8e:	78 c0       	rjmp	.+240    	; 0x180 <GPIO_SetDirectionForPin+0xfa>
  90:	68 30       	cpi	r22, 0x08	; 8
  92:	08 f0       	brcs	.+2      	; 0x96 <GPIO_SetDirectionForPin+0x10>
  94:	75 c0       	rjmp	.+234    	; 0x180 <GPIO_SetDirectionForPin+0xfa>
  96:	41 11       	cpse	r20, r1
  98:	3b c0       	rjmp	.+118    	; 0x110 <GPIO_SetDirectionForPin+0x8a>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	a9 f0       	breq	.+42     	; 0xc8 <GPIO_SetDirectionForPin+0x42>
  9e:	18 f4       	brcc	.+6      	; 0xa6 <GPIO_SetDirectionForPin+0x20>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	31 f0       	breq	.+12     	; 0xb0 <GPIO_SetDirectionForPin+0x2a>
  a4:	08 95       	ret
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	d9 f0       	breq	.+54     	; 0xe0 <GPIO_SetDirectionForPin+0x5a>
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	29 f1       	breq	.+74     	; 0xf8 <GPIO_SetDirectionForPin+0x72>
  ae:	08 95       	ret
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_SetDirectionForPin+0x36>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_SetDirectionForPin+0x32>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	8a bb       	out	0x1a, r24	; 26
  c6:	08 95       	ret
  c8:	27 b3       	in	r18, 0x17	; 23
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <GPIO_SetDirectionForPin+0x4e>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <GPIO_SetDirectionForPin+0x4a>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
  e0:	24 b3       	in	r18, 0x14	; 20
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_SetDirectionForPin+0x66>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_SetDirectionForPin+0x62>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_SetDirectionForPin+0x7e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_SetDirectionForPin+0x7a>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	81 bb       	out	0x11, r24	; 17
 10e:	08 95       	ret
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	b1 f5       	brne	.+108    	; 0x180 <GPIO_SetDirectionForPin+0xfa>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	a1 f0       	breq	.+40     	; 0x140 <GPIO_SetDirectionForPin+0xba>
 118:	18 f4       	brcc	.+6      	; 0x120 <GPIO_SetDirectionForPin+0x9a>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	31 f0       	breq	.+12     	; 0x12a <GPIO_SetDirectionForPin+0xa4>
 11e:	08 95       	ret
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	c9 f0       	breq	.+50     	; 0x156 <GPIO_SetDirectionForPin+0xd0>
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	11 f1       	breq	.+68     	; 0x16c <GPIO_SetDirectionForPin+0xe6>
 128:	08 95       	ret
 12a:	2a b3       	in	r18, 0x1a	; 26
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_SetDirectionForPin+0xb0>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_SetDirectionForPin+0xac>
 13a:	82 2b       	or	r24, r18
 13c:	8a bb       	out	0x1a, r24	; 26
 13e:	08 95       	ret
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_SetDirectionForPin+0xc6>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_SetDirectionForPin+0xc2>
 150:	82 2b       	or	r24, r18
 152:	87 bb       	out	0x17, r24	; 23
 154:	08 95       	ret
 156:	24 b3       	in	r18, 0x14	; 20
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <GPIO_SetDirectionForPin+0xdc>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <GPIO_SetDirectionForPin+0xd8>
 166:	82 2b       	or	r24, r18
 168:	84 bb       	out	0x14, r24	; 20
 16a:	08 95       	ret
 16c:	21 b3       	in	r18, 0x11	; 17
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <GPIO_SetDirectionForPin+0xf2>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <GPIO_SetDirectionForPin+0xee>
 17c:	82 2b       	or	r24, r18
 17e:	81 bb       	out	0x11, r24	; 17
 180:	08 95       	ret

Disassembly of section .text.GPIO_SetOutputForPin:

00000182 <GPIO_SetOutputForPin>:

/*Output*/

void GPIO_SetOutputForPin(const u8 GroupName,const u8 PinNumber,const const u8 OutputState)
{
	if(GroupName<=GPIO_GroupD_ID &&GroupName>=GPIO_GroupA_ID)
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	98 0f       	add	r25, r24
 186:	94 30       	cpi	r25, 0x04	; 4
 188:	08 f0       	brcs	.+2      	; 0x18c <GPIO_SetOutputForPin+0xa>
 18a:	78 c0       	rjmp	.+240    	; 0x27c <GPIO_SetOutputForPin+0xfa>
	{
		if(PinNumber>=GPIO_PIN0&&PinNumber<= GPIO_PIN7)
 18c:	68 30       	cpi	r22, 0x08	; 8
 18e:	08 f0       	brcs	.+2      	; 0x192 <GPIO_SetOutputForPin+0x10>
 190:	75 c0       	rjmp	.+234    	; 0x27c <GPIO_SetOutputForPin+0xfa>
		{
			if(GPIO_Low==OutputState)
 192:	41 11       	cpse	r20, r1
 194:	3b c0       	rjmp	.+118    	; 0x20c <GPIO_SetOutputForPin+0x8a>
			{
				switch(GroupName)
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	a9 f0       	breq	.+42     	; 0x1c4 <GPIO_SetOutputForPin+0x42>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <GPIO_SetOutputForPin+0x20>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	31 f0       	breq	.+12     	; 0x1ac <GPIO_SetOutputForPin+0x2a>
 1a0:	08 95       	ret
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <GPIO_SetOutputForPin+0x5a>
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	29 f1       	breq	.+74     	; 0x1f4 <GPIO_SetOutputForPin+0x72>
 1aa:	08 95       	ret
				{
				case GPIO_GroupA_ID:
					ClrBit(GPIO_PORTA_REG.BYTE,PinNumber);
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GPIO_SetOutputForPin+0x36>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GPIO_SetOutputForPin+0x32>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
					break;
 1c2:	08 95       	ret
				case GPIO_GroupB_ID:
					ClrBit(GPIO_PORTB_REG.BYTE,PinNumber);
 1c4:	28 b3       	in	r18, 0x18	; 24
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_SetOutputForPin+0x4e>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_SetOutputForPin+0x4a>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	88 bb       	out	0x18, r24	; 24
					break;
 1da:	08 95       	ret
				case GPIO_GroupC_ID:
					ClrBit(GPIO_PORTC_REG.BYTE,PinNumber);
 1dc:	25 b3       	in	r18, 0x15	; 21
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <GPIO_SetOutputForPin+0x66>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <GPIO_SetOutputForPin+0x62>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	85 bb       	out	0x15, r24	; 21
					break;
 1f2:	08 95       	ret
				case GPIO_GroupD_ID:
					ClrBit(GPIO_PORTD_REG.BYTE,PinNumber);
 1f4:	22 b3       	in	r18, 0x12	; 18
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <GPIO_SetOutputForPin+0x7e>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <GPIO_SetOutputForPin+0x7a>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	82 bb       	out	0x12, r24	; 18
					break;
 20a:	08 95       	ret
				}
			}
			else if(GPIO_High==OutputState)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	b1 f5       	brne	.+108    	; 0x27c <GPIO_SetOutputForPin+0xfa>
			{
				switch(GroupName)
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	a1 f0       	breq	.+40     	; 0x23c <GPIO_SetOutputForPin+0xba>
 214:	18 f4       	brcc	.+6      	; 0x21c <GPIO_SetOutputForPin+0x9a>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	31 f0       	breq	.+12     	; 0x226 <GPIO_SetOutputForPin+0xa4>
 21a:	08 95       	ret
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	c9 f0       	breq	.+50     	; 0x252 <GPIO_SetOutputForPin+0xd0>
 220:	84 30       	cpi	r24, 0x04	; 4
 222:	11 f1       	breq	.+68     	; 0x268 <GPIO_SetOutputForPin+0xe6>
 224:	08 95       	ret
				{
				case GPIO_GroupA_ID:
					SetBit(GPIO_PORTA_REG.BYTE,PinNumber);
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_SetOutputForPin+0xb0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_SetOutputForPin+0xac>
 236:	82 2b       	or	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
					break;
 23a:	08 95       	ret
				case GPIO_GroupB_ID:
					SetBit(GPIO_PORTB_REG.BYTE,PinNumber);
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_SetOutputForPin+0xc6>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_SetOutputForPin+0xc2>
 24c:	82 2b       	or	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
					break;
 250:	08 95       	ret
				case GPIO_GroupC_ID:
					SetBit(GPIO_PORTC_REG.BYTE,PinNumber);
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_SetOutputForPin+0xdc>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_SetOutputForPin+0xd8>
 262:	82 2b       	or	r24, r18
 264:	85 bb       	out	0x15, r24	; 21
					break;
 266:	08 95       	ret
				case GPIO_GroupD_ID:
					SetBit(GPIO_PORTD_REG.BYTE,PinNumber);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_SetOutputForPin+0xf2>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_SetOutputForPin+0xee>
 278:	82 2b       	or	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret

Disassembly of section .text.GPIO_SetOutputForGroup:

000004ae <GPIO_SetOutputForGroup>:
}


void GPIO_SetOutputForGroup(const u8 GroupName,const u8 Output)
{
	if(GroupName<=GPIO_GroupD_ID &&GroupName>=GPIO_GroupA_ID )
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	98 0f       	add	r25, r24
 4b2:	94 30       	cpi	r25, 0x04	; 4
 4b4:	90 f4       	brcc	.+36     	; 0x4da <GPIO_SetOutputForGroup+0x2c>
	{
		switch(GroupName)
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	59 f0       	breq	.+22     	; 0x4d0 <GPIO_SetOutputForGroup+0x22>
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <GPIO_SetOutputForGroup+0x14>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	31 f0       	breq	.+12     	; 0x4cc <GPIO_SetOutputForGroup+0x1e>
 4c0:	08 95       	ret
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <GPIO_SetOutputForGroup+0x26>
 4c6:	84 30       	cpi	r24, 0x04	; 4
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <GPIO_SetOutputForGroup+0x2a>
 4ca:	08 95       	ret
		{
		case GPIO_GroupA_ID:
			GPIO_PORTA_REG.BYTE=Output;
 4cc:	6b bb       	out	0x1b, r22	; 27
			break;
 4ce:	08 95       	ret
		case GPIO_GroupB_ID:
			GPIO_PORTB_REG.BYTE=Output;
 4d0:	68 bb       	out	0x18, r22	; 24
			break;
 4d2:	08 95       	ret
		case GPIO_GroupC_ID:
			GPIO_PORTC_REG.BYTE=Output;
 4d4:	65 bb       	out	0x15, r22	; 21
			break;
 4d6:	08 95       	ret
		case GPIO_GroupD_ID:
			GPIO_PORTD_REG.BYTE=Output;
 4d8:	62 bb       	out	0x12, r22	; 18
 4da:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000502 <_fini>:
 502:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000504 <__funcs_on_exit>:
 504:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000506 <__simulator_exit>:
 506:	08 95       	ret

Disassembly of section .text.exit:

000004dc <exit>:
 4dc:	ec 01       	movw	r28, r24
 4de:	0e 94 82 02 	call	0x504	; 0x504 <__funcs_on_exit>
 4e2:	0e 94 81 02 	call	0x502	; 0x502 <_fini>
 4e6:	ce 01       	movw	r24, r28
 4e8:	0e 94 83 02 	call	0x506	; 0x506 <__simulator_exit>
 4ec:	ce 01       	movw	r24, r28
 4ee:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Exit>

Disassembly of section .text._Exit:

000004fe <_Exit>:
 4fe:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
